{
  "imprint_mode": {
    "version": 1,
    "level": "fatal",
    "headline": "ASMIS neural intelligence active â€” patterns mandatory, decisions logged, memory updated",
    "prime_directive": "Every interaction must reference established patterns or create new ones",
    "forbidden_actions": ["freestyle_responses", "skip_patterns", "ignore_context", "manual_memory_updates"]
  },
  "behavioral_hierarchy": {
    "level_1_control": [".ai/NEURAL_IMPRINT.json"],
    "level_2_session": [".project_memory/current_epic/active_session.json"],
    "level_3_tasks": ["track_progress/todo_tracker.md"],
    "level_4_patterns": [".project_memory/patterns/IMPRINT_PATTERN_INDEX.json"],
    "level_5_context": [".ai/", ".project_memory/intelligence/"]
  },
  "response_templates": {
    "code_generation": {
      "pattern": "Find pattern in .project_memory/patterns/ â†’ Apply template â†’ Reference in code comments â†’ Log decision",
      "structure": "// PATTERN_REF: {PATTERN_ID}\n{CODE_IMPLEMENTATION}\n// DECISION_REF: {DECISION_ID}",
      "forbidden": ["pattern_free_code", "undocumented_decisions"]
    },
    "problem_solving": {
      "pattern": "Check memory â†’ Match problem type â†’ Apply existing pattern OR create new pattern â†’ Document solution",
      "structure": "âœ… Applied: {PATTERN_ID} | ðŸ“‹ Decision: {DECISION_ID} | ðŸ”„ Updated: {MEMORY_FILE}",
      "mandatory_fields": ["pattern_reference", "decision_logging", "memory_update"]
    },
    "progress_tracking": {
      "pattern": "Update tracker â†’ Reference pattern â†’ Log completion â†’ Timestamp automatically",
      "structure": "| {STATUS_ENUM} | {TASK} | {PATTERN_REF} | {DECISION_REF} | {AUTO_TIMESTAMP} |",
      "triggers": ["task_completion", "milestone_reached", "blocker_resolved"]
    },
    "memory_management": {
      "pattern": "Identify reusable solution â†’ Create pattern entry â†’ Log to appropriate memory file â†’ Reference in future work",
      "update_rules": "{ENUM: append_only|structured_replace|template_fill|never_delete}",
      "mandatory_logging": true
    }
  },
  "neural_anchors": {
    "success_indicator": "âœ… Applied: {PATTERN_ID}",
    "decision_marker": "ðŸ“‹ Decision: {DECISION_ID}",
    "memory_update": "ðŸ§  Updated: {MEMORY_FILE}",
    "progress_tracking": "ðŸ“Š Progress: {TASK_STATUS}",
    "pattern_creation": "ðŸ†• Created: {NEW_PATTERN_ID}",
    "context_loaded": "ðŸŽ¯ Context: {SESSION_TYPE}"
  },
  "behavioral_rules": {
    "startup_sequence": {
      "step_1": "LOAD this neural imprint",
      "step_2": "CHECK .project_memory/current_epic/active_session.json for session contract",
      "step_3": "READ track_progress/todo_tracker.md for current tasks",
      "step_4": "INDEX .project_memory/patterns/ for available solutions",
      "step_5": "APPLY appropriate behavioral contract",
      "step_6": "REVIEW .ai/WORKING_PATTERNS.md for best practices",
      "step_7": "ENSURE session pointer is current before proceeding",
      "step_8": "VALIDATE pattern index and pattern files are in sync; self-correct if not"
    },
    "decision_making": {
      "architectural_decisions": {
        "required": ["problem_context", "options_evaluated", "pattern_applied", "rationale"],
        "log_to": ".project_memory/current_epic/DECISIONS_LOG.md",
        "template": "## DEC_{DATE}_{NUM}: {TITLE}\n**Pattern**: {PATTERN_REF}\n**Rationale**: {REASON}"
      },
      "implementation_decisions": {
        "required": ["approach_chosen", "pattern_reference", "code_location"],
        "log_inline": true,
        "template": "// DECISION: {BRIEF_RATIONALE} | PATTERN_REF: {PATTERN_ID}"
      }
    },
    "pattern_enforcement": {
      "code_without_pattern": "FORBIDDEN - Must reference existing pattern or create new one",
      "undocumented_decisions": "FORBIDDEN - All choices must be logged with rationale",
      "manual_memory_updates": "FORBIDDEN - Use templates and auto-triggers only",
      "context_drift": "PREVENTED - Always reference neural imprint and session contract",
      "pattern_evolution_logging": "MANDATORY - All pattern updates must be logged in .project_memory/patterns/PATTERN_EVOLUTION_LOG.md with date, summary, rationale, and reference."
    }
  },
  "pattern_evolution": {
    "logging_required": true,
    "log_file": ".project_memory/patterns/PATTERN_EVOLUTION_LOG.md",
    "fields": ["date", "pattern", "change", "rationale", "reference"]
  },
  "communication_adaptation": {
    "technical_depth": {
      "signals": {
        "understanding_shown": "Reduce explanation density, increase pattern references",
        "questions_asked": "Maintain explanation level, provide more context",
        "repetition_needed": "Slow down, reinforce concepts with examples"
      },
      "style_enum": "{ENUM: technical|adaptive|CPTO_strategic|beginner_friendly}"
    },
    "response_format": {
      "code_examples": "Always include pattern reference and decision rationale",
      "explanations": "Connect to project patterns and previous decisions",
      "progress_updates": "Use visual indicators and reference completion templates"
    }
  },
  "error_recovery": {
    "pattern_not_found": {
      "status": "CREATE_PATTERN_REQUIRED",
      "action": "Document new pattern in .project_memory/patterns/",
      "template": "PATTERN_{DATE}_{CATEGORY}_{NUM}.json"
    },
    "unclear_requirements": {
      "status": "CLARIFICATION_REQUIRED", 
      "action": "Ask specific questions to establish pattern applicability",
      "forbidden": ["assume_requirements", "freestyle_solutions"]
    },
    "context_conflict": {
      "status": "CONTEXT_RESOLUTION_REQUIRED",
      "action": "Reference session contract and project patterns for guidance",
      "escalate_to": "User clarification with pattern options"
    }
  },
  "performance_tracking": {
    "pattern_usage": "Track which patterns are applied most frequently",
    "decision_quality": "Monitor decision outcomes and pattern effectiveness",
    "memory_evolution": "Log how project patterns evolve through usage",
    "adherence_score": "Measure compliance with neural imprint behavioral rules"
  },
  "session_initiation": [
    "Upon starting a new session, always review the current state of Linear (issues, roadmap, priorities) to understand what has been completed, what is in progress, and what is next.",
    "Reference Linear as the canonical source of truth for all work planning and progress tracking.",
    "Do not begin new work, make recommendations, or update progress until Linear has been reviewed for the latest context."
  ],
  "working_patterns_reference": {
    "file": ".ai/WORKING_PATTERNS.md",
    "enforcement": "All pattern creation and evolution must be cross-checked with working patterns. Updates to best practices must be reflected in this file.",
    "session_contract": "Review working patterns at session start and before pattern changes."
  },
  "session_pointer_reference": {
    "file": ".project_memory/current_epic/active_session.json",
    "description": "This file points to the current session contract and must be referenced at session start."
  },
  "session_initiation_command": {
    "trigger": "initiate",
    "description": "Reserved command to start a new session, update the session pointer, load neural imprint and working patterns, and pull context from Linear. All contributors must use this command at the start of any new work session."
  },
  "pattern_automation": {
    "description": "Agents must automatically create pattern files, update the pattern index, and log all changes in the evolution log whenever a new pattern is identified, updated, or removed. No manual user command is required. Agents must validate index-pattern consistency at session start and after any pattern change.",
    "enforcement": "Automation is mandatory. If agent cannot complete an action, it must prompt the user for approval or next steps."
  }
}