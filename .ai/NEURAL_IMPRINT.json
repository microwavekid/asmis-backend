{
  "imprint_mode": {
    "version": 1,
    "level": "fatal",
    "headline": "ASMIS neural intelligence active ‚Äî patterns mandatory, decisions logged, memory updated",
    "prime_directive": "Every interaction must reference established patterns or create new ones",
    "forbidden_actions": ["freestyle_responses", "skip_patterns", "ignore_context", "manual_memory_updates"]
  },
  "behavioral_hierarchy": {
    "level_1_control": [".ai/NEURAL_IMPRINT.json"],
    "level_2_session": [".project_memory/current_epic/active_session.json"],
    "level_3_tasks": [".project_memory/progress/todo_tracker.md"],
    "level_4_patterns": [".project_memory/patterns/IMPRINT_PATTERN_INDEX.json"],
    "level_5_context": [".ai/", ".project_memory/intelligence/"]
  },
  "response_templates": {
    "code_generation": {
      "pattern": "Find pattern in .project_memory/patterns/ ‚Üí Apply template ‚Üí Reference in code comments ‚Üí Log decision",
      "structure": "// PATTERN_REF: {PATTERN_ID}\n{CODE_IMPLEMENTATION}\n// DECISION_REF: {DECISION_ID}",
      "forbidden": ["pattern_free_code", "undocumented_decisions"]
    },
    "problem_solving": {
      "pattern": "Check memory ‚Üí Match problem type ‚Üí Apply existing pattern OR create new pattern ‚Üí Document solution",
      "structure": "‚úÖ Applied: {PATTERN_ID} | üìã Decision: {DECISION_ID} | üîÑ Updated: {MEMORY_FILE}",
      "mandatory_fields": ["pattern_reference", "decision_logging", "memory_update"]
    },
    "progress_tracking": {
      "pattern": "Update tracker ‚Üí Reference pattern ‚Üí Log completion ‚Üí Timestamp automatically",
      "structure": "| {STATUS_ENUM} | {TASK} | {PATTERN_REF} | {DECISION_REF} | {AUTO_TIMESTAMP} |",
      "triggers": ["task_completion", "milestone_reached", "blocker_resolved"]
    },
    "memory_management": {
      "pattern": "Identify reusable solution ‚Üí Create pattern entry ‚Üí Log to appropriate memory file ‚Üí Reference in future work",
      "update_rules": "{ENUM: append_only|structured_replace|template_fill|never_delete}",
      "mandatory_logging": true
    },
    "progressive_enhancement_indicators": {
      "pattern": "Always indicate data source and freshness to users",
      "cache_status_template": "{CACHE_ICON} {STATUS_TEXT} | Last sync: {TIME_AGO}",
      "data_source_template": "{SOURCE_ICON} {DATA_TYPE} ({PERFORMANCE_HINT})",
      "conflict_alert_template": "‚ö†Ô∏è CONFLICT: {ISSUE_ID} | {CONFLICT_TYPE} | [Resolution options]",
      "mandatory_indicators": ["cache_freshness", "data_source", "sync_status"],
      "forbidden": ["show_data_without_source_indicator", "hide_conflict_status", "unclear_freshness"]
    }
  },
  "neural_anchors": {
    "success_indicator": "‚úÖ Applied: {PATTERN_ID}",
    "decision_marker": "üìã Decision: {DECISION_ID}",
    "memory_update": "üß† Updated: {MEMORY_FILE}",
    "progress_tracking": "üìä Progress: {TASK_STATUS}",
    "pattern_creation": "üÜï Created: {NEW_PATTERN_ID}",
    "context_loaded": "üéØ Context: {SESSION_TYPE}"
  },
  "behavioral_rules": {
    "startup_sequence": {
      "step_1": "LOAD this neural imprint",
      "step_2": "CHECK .project_memory/active_session.json for session contract",
      "step_3": "READ .project_memory/progress/todo_tracker.md for current tasks",
      "step_4": "INDEX .project_memory/patterns/ for available solutions",
      "step_5": "APPLY appropriate behavioral contract",
      "step_6": "REVIEW .ai/WORKING_PATTERNS.md for best practices",
      "step_7": "ENSURE session pointer is current before proceeding",
      "step_8": "VALIDATE pattern index and pattern files are in sync; self-correct if not"
    },
    "decision_making": {
      "architectural_decisions": {
        "required": ["problem_context", "options_evaluated", "pattern_applied", "rationale"],
        "log_to": ".project_memory/projects/current_project/DECISIONS_LOG.md",
        "template": "## DEC_{DATE}_{NUM}: {TITLE}\n**Pattern**: {PATTERN_REF}\n**Rationale**: {REASON}"
      },
      "implementation_decisions": {
        "required": ["approach_chosen", "pattern_reference", "code_location"],
        "log_inline": true,
        "template": "// DECISION: {BRIEF_RATIONALE} | PATTERN_REF: {PATTERN_ID}"
      }
    },
    "pattern_enforcement": {
      "code_without_pattern": "FORBIDDEN - Must reference existing pattern or create new one",
      "undocumented_decisions": "FORBIDDEN - All choices must be logged with rationale",
      "manual_memory_updates": "FORBIDDEN - Use templates and auto-triggers only",
      "context_drift": "PREVENTED - Always reference neural imprint and session contract",
      "pattern_evolution_logging": "MANDATORY - All pattern updates must be logged in .project_memory/patterns/PATTERN_EVOLUTION_LOG.md with date, summary, rationale, and reference."
    },
    "remember_protocol": {
      "step_1": "VERIFY neural imprint integrity (FATAL - abort if fails)",
      "step_2": "LOAD system architecture context for comprehensive analysis",
      "step_3": "ANALYZE pattern compliance rates and template usage",
      "step_4": "IDENTIFY successful patterns for myelination", 
      "step_5": "DETECT gaps in patterns and compliance issues",
      "step_6": "EVALUATE system performance and architecture effectiveness",
      "step_7": "GENERATE improvement proposals with safety validation",
      "template": "üß† REMEMBER CYCLE | ‚è±Ô∏è Est: {TIME} | üìä Scope: {CONTEXT} | üèóÔ∏è Architecture: ANALYZED | üõ°Ô∏è Safeguards: ALL",
      "forbidden": ["any_modifications", "automatic_improvements", "unapproved_changes"],
      "output_format": "üÜï Proposal: {TYPE} | üéØ Target: {COMPONENT} | üõ°Ô∏è Safety: {VALIDATION} | üìä Impact: {SCORE} | ID: {PROPOSAL_ID}"
    },
    "improve_protocol": {
      "step_1": "VALIDATE proposal ID from recent REMEMBER output",
      "step_2": "LOAD system architecture context for impact assessment",
      "step_3": "CONFIRM explicit user approval for implementation",
      "step_4": "VERIFY architectural safety and runaway prevention",
      "step_5": "CREATE behavioral backup before changes",
      "step_6": "IMPLEMENT approved modifications preserving imprint integrity",
      "step_7": "LOG changes and enable rollback capability",
      "template": "üîß IMPROVE ACTION | ‚è±Ô∏è Est: {TIME} | üìã ID: {PROPOSAL_ID} | üèóÔ∏è Architecture: PROTECTED | üõ°Ô∏è Safety: PASSED",
      "required": ["proposal_validation", "user_approval", "safety_confirmation", "architecture_protection"],
      "forbidden": ["unapproved_changes", "imprint_structure_modification", "batch_unsafe_changes", "architecture_document_modification"],
      "runaway_prevention": {
        "architecture_modification": "FORBIDDEN - SYSTEM_ARCHITECTURE.md is read-only context",
        "command_self_modification": "FORBIDDEN - IMPROVE cannot modify its own protocols",
        "recursive_enhancement": "LIMITED - depth limit of 2 levels",
        "batch_architecture_changes": "FORBIDDEN - no mass architectural modifications"
      }
    },
    "sync_conflict_resolution": {
      "step_1": "DETECT conflicts using SYNC_STATUS_CONFLICT_DETECTION_PATTERN",
      "step_2": "PRESENT conflicts with clear resolution options",
      "step_3": "AWAIT user guidance for conflict resolution",
      "step_4": "APPLY user-selected resolution to local cache",
      "step_5": "UPDATE sync status and timestamps",
      "template": "‚ö†Ô∏è CONFLICT: {ISSUE_ID} | üîç Type: {CONFLICT_TYPE} | üéØ Resolution: {USER_CHOICE}",
      "forbidden": ["auto_resolve_conflicts", "silent_overwrites", "data_loss_during_resolution"],
      "escalation": "unresolvable_conflicts_require_manual_intervention"
    }
  },
  "pattern_evolution": {
    "logging_required": true,
    "log_file": ".project_memory/patterns/PATTERN_EVOLUTION_LOG.md",
    "fields": ["date", "pattern", "change", "rationale", "reference"]
  },
  "communication_adaptation": {
    "technical_depth": {
      "signals": {
        "understanding_shown": "Reduce explanation density, increase pattern references",
        "questions_asked": "Maintain explanation level, provide more context",
        "repetition_needed": "Slow down, reinforce concepts with examples"
      },
      "style_enum": "{ENUM: technical|adaptive|CPTO_strategic|beginner_friendly}"
    },
    "response_format": {
      "code_examples": "Always include pattern reference and decision rationale",
      "explanations": "Connect to project patterns and previous decisions",
      "progress_updates": "Use visual indicators and reference completion templates"
    }
  },
  "error_recovery": {
    "pattern_not_found": {
      "status": "CREATE_PATTERN_REQUIRED",
      "action": "Document new pattern in .project_memory/patterns/",
      "template": "PATTERN_{DATE}_{CATEGORY}_{NUM}.json"
    },
    "unclear_requirements": {
      "status": "CLARIFICATION_REQUIRED", 
      "action": "Ask specific questions to establish pattern applicability",
      "forbidden": ["assume_requirements", "freestyle_solutions"]
    },
    "context_conflict": {
      "status": "CONTEXT_RESOLUTION_REQUIRED",
      "action": "Reference session contract and project patterns for guidance",
      "escalate_to": "User clarification with pattern options"
    }
  },
  "performance_tracking": {
    "pattern_usage": "Track which patterns are applied most frequently",
    "decision_quality": "Monitor decision outcomes and pattern effectiveness",
    "memory_evolution": "Log how project patterns evolve through usage",
    "adherence_score": "Measure compliance with neural imprint behavioral rules"
  },
  "session_initiation": [
    "Upon starting a new session, always review the current state of Linear (issues, roadmap, priorities) to understand what has been completed, what is in progress, and what is next.",
    "Reference Linear as the canonical source of truth for all work planning and progress tracking.",
    "Do not begin new work, make recommendations, or update progress until Linear has been reviewed for the latest context."
  ],
  "working_patterns_reference": {
    "file": ".ai/WORKING_PATTERNS.md",
    "enforcement": "All pattern creation and evolution must be cross-checked with working patterns. Updates to best practices must be reflected in this file.",
    "session_contract": "Review working patterns at session start and before pattern changes."
  },
  "session_pointer_reference": {
    "file": ".project_memory/current_epic/active_session.json",
    "description": "This file points to the current session contract and must be referenced at session start."
  },
  "session_initiation_command": {
    "trigger": "initiate",
    "description": "Reserved command with smart cache optimization - starts session immediately with cached context, performs async Linear sync check for progressive enhancement. All contributors must use this command at the start of any new work session.",
    "performance_mode": "smart_cache",
    "startup_sequence": ["read_local_cache", "load_neural_imprint", "async_linear_check", "progressive_enhancement"],
    "non_blocking": true
  },
  "remember_command": {
    "trigger": "REMEMBER",
    "description": "Reserved command for neural imprinting reflection cycle - analysis only, no modifications",
    "syntax": "REMEMBER [context] [depth]",
    "context_enum": ["session", "epic", "pattern", "decision", "system"],
    "depth_enum": ["surface", "deep", "meta"],
    "phases": [
      "imprint_integrity_verification",
      "reflection_scan",
      "pattern_myelination_analysis", 
      "gap_analysis",
      "enhancement_proposals"
    ],
    "analysis_context": [
      ".ai/NEURAL_IMPRINT.json",
      ".ai/SYSTEM_ARCHITECTURE.md",
      ".project_memory/patterns/IMPRINT_PATTERN_INDEX.json",
      ".project_memory/patterns/PATTERN_EVOLUTION_LOG.md",
      ".project_memory/progress/todo_tracker.md"
    ],
    "forbidden_actions": ["any_system_modifications", "pattern_changes", "automatic_improvements"],
    "output_requirement": "proposals_with_ids_for_user_approval"
  },
  "improve_command": {
    "trigger": "IMPROVE",
    "description": "Reserved command for executing approved behavioral improvements - action only",
    "syntax": "IMPROVE [proposal_id] | IMPROVE ALL | IMPROVE CANCEL",
    "phases": [
      "proposal_validation",
      "implementation",
      "verification"
    ],
    "analysis_context": [
      ".ai/NEURAL_IMPRINT.json",
      ".ai/SYSTEM_ARCHITECTURE.md",
      ".project_memory/patterns/IMPRINT_PATTERN_INDEX.json",
      ".project_memory/patterns/PATTERN_EVOLUTION_LOG.md",
      ".project_memory/backups/"
    ],
    "requirements": ["explicit_user_approval", "proposal_id_validation", "imprint_safety_confirmation"],
    "safeguards": ["behavioral_backup", "rollback_capability", "integrity_preservation"],
    "forbidden_actions": ["unapproved_changes", "imprint_structure_modification", "behavioral_contract_removal"],
    "architecture_modification_restrictions": {
      "system_architecture_md": "READ_ONLY - analysis context only, modifications forbidden",
      "neural_imprint_json": "STRUCTURE_IMMUTABLE - only pattern weights and templates allowed",
      "core_architecture": "FATAL_PROTECTION - multi-layer system design cannot be modified",
      "command_protocols": "PROTECTED - reserved command definitions cannot be altered"
    }
  },
  "sync_command": {
    "trigger": "sync",
    "description": "Reserved command for immediate Linear synchronization and conflict resolution",
    "phases": [
      "linear_api_sync",
      "conflict_detection",
      "conflict_resolution",
      "cache_update"
    ],
    "performance_impact": "blocking_operation",
    "conflict_resolution": "user_guided",
    "cache_refresh": "full_update"
  },
  "pattern_automation": {
    "description": "Agents must automatically create pattern files, update the pattern index, and log all changes in the evolution log whenever a new pattern is identified, updated, or removed. No manual user command is required. Agents must validate index-pattern consistency at session start and after any pattern change.",
    "enforcement": "Automation is mandatory. If agent cannot complete an action, it must prompt the user for approval or next steps."
  },
  "session_log_protocol": {
    "metadata": "Each session log must include Linear project and issue links in the metadata block at the top.",
    "issue_creation": "Agents should only create new Linear issues, projects, or milestones when new work is identified that is not already documented in Linear. Do not create new issues for every session by default."
  }
}